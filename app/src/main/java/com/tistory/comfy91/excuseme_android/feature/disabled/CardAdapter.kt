package com.tistory.comfy91.excuseme_android.feature.disabledimport android.util.Logimport android.view.LayoutInflaterimport android.view.ViewGroupimport android.widget.*import androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.google.android.material.card.MaterialCardViewimport com.tistory.comfy91.excuseme_android.Rclass CardAdapter(//    private val arrData: ArrayList<ItemCard>,//    private val listener: CardViewHolder.ItemClickListener) :    RecyclerView.Adapter<CardAdapter.CardViewHolder>(), Filterable {    var data = arrayListOf<ItemCard>()    var searchedList: ArrayList<ItemCard>? = null    override fun onCreateViewHolder(parent: ViewGroup, p1: Int) = CardViewHolder(parent)    override fun getItemCount(): Int {        return searchedList!!.size    }    override fun onBindViewHolder(holder: CardViewHolder, position: Int) {//        holder.bind(data.get(position))        holder.bind(searchedList!!.get(position))    }    // init    init {        this.searchedList = data    }    //for filter    override fun getFilter(): Filter {        return object : Filter() {            override fun performFiltering(charSequence: CharSequence): FilterResults {                val charString = charSequence.toString()                if (charString.isEmpty()) {                    searchedList = data                } else {                    val filteredList = ArrayList<ItemCard>()                    //원하는 데이터를 검색                    for (row in data) {                        Log.d("search1", "search data :  " + row.title.toLowerCase())                        Log.d("search2", "input data " + charString.toLowerCase())                        if (row.title.toLowerCase().contains(charString.toLowerCase())) {                            Log.d("search3", "addddd ")                            filteredList.add(row)                        }                    }                    searchedList = filteredList                }                val filterResults = FilterResults()                filterResults.values = searchedList                return filterResults            }            override fun publishResults(charSequence: CharSequence, filterResults: FilterResults) {                Log.d("search4", "publishResults ")                searchedList = filterResults.values as ArrayList<ItemCard>                notifyDataSetChanged()            }        }    }    inner class CardViewHolder(parent: ViewGroup) : RecyclerView.ViewHolder(        LayoutInflater.from(parent.context).inflate(R.layout.disabled_item_card, parent, false)    ) {        private val card_view: MaterialCardView = itemView.findViewById(R.id.card_view)        private val panel: LinearLayout = itemView.findViewById(R.id.panel)        private val imgCard: ImageView = itemView.findViewById(R.id.imgCard)        private val tvCardTitle: TextView = itemView.findViewById(R.id.tvCardTitle)        fun bind(data: ItemCard) {            Glide.with(itemView).load(data.imageUrl).into(imgCard)            tvCardTitle.text = data.title//            itemView.setOnSingleClickListener {//                val intent = Intent(itemView.context, DetailCardActivity::class.java)//                intent.putParcelableArrayListExtra("DATA_CARD", arrayListOf(data))//                itemView.context.startActivity(intent)//            }            itemView.setOnClickListener {                var isSelected = panel.isSelected                panel.isSelected = !isSelected            }        }    }    interface ItemClickListener {        fun onItemClicked(itemCard: ItemCard)    }}